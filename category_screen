// ignore_for_file: camel_case_types  // تجاهل تحذير نمط التسمية في أسماء الكلاسات.

import 'package:flutter/material.dart';  // استيراد مكتبة Flutter لبناء واجهات المستخدم.
import 'package:homemate/models/category.dart';  // استيراد نموذج بيانات التصنيف.
import 'package:homemate/widgets/category_item.dart';  // استيراد عنصر واجهة لعرض التصنيف.
import 'package:homemate/services/category_service.dart';  // استيراد خدمة جلب التصنيفات من قاعدة البيانات أو API.

class CategoryScreen extends StatefulWidget {
  const CategoryScreen({super.key});  // تعريف ويدجت من نوع StatefulWidget لإنشاء واجهة قابلة للتحديث.

  @override
  _CategoriesPageState createState() => _CategoriesPageState();  // ربط الويدجت بحالته الداخلية.
}

class _CategoriesPageState extends State<CategoryScreen> {
  late Future<List<Category>> _categoriesFuture;  // متغير لاستقبال نتيجة جلب التصنيفات مستقبليًا.

  @override
  void initState() {
    super.initState();
    _categoriesFuture = CategoryService().getCategories();  // جلب التصنيفات عند تحميل الصفحة.
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(  // هيكل الصفحة الكامل.
      body: Column(  // تقسيم الصفحة إلى عمود فيه عنصرين (قائمة التصنيفات + قسم الطلب اليدوي).
        children: [
          Expanded(  // تمديد هذا العنصر ليأخذ المساحة المتاحة.
            child: FutureBuilder<List<Category>>(  // عنصر يستخدم لعرض بيانات مستقبلية.
              future: _categoriesFuture,  // البيانات المستقبلية المطلوبة (قائمة التصنيفات).
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return Center(child: CircularProgressIndicator());  // أثناء التحميل، عرض مؤشر انتظار.
                }
                if (snapshot.hasError) {
                  return Center(child: Text('Error: ${snapshot.error}'));  // عند حدوث خطأ، عرضه.
                }

                final categories = snapshot.data ?? [];  // تخزين البيانات في متغير بعد التأكد من أنها غير فارغة.

                return GridView(  // عرض التصنيفات في شبكة (شبكة مربعات).
                  padding: const EdgeInsets.all(10),  // مسافة داخلية حول الشبكة.
                  gridDelegate: const SliverGridDelegateWithMaxCrossAxisExtent(
                    maxCrossAxisExtent: 200,  // أقصى عرض لكل عنصر.
                    childAspectRatio: 7 / 8,  // نسبة العرض إلى الارتفاع لكل عنصر.
                    mainAxisSpacing: 10,  // المسافة الرأسية بين العناصر.
                    crossAxisSpacing: 10,  // المسافة الأفقية بين العناصر.
                  ),
                  children: categories.map(
                    (category) => CategoryItem(
                      category.id,  // تمرير رقم التصنيف.
                      category.name,  // تمرير اسم التصنيف.
                      category.image,  // تمرير صورة التصنيف.
                    ),
                  ).toList(),  // تحويل القائمة إلى ويدجتس.
                );
              },
            ),
          ),
          Container(  // القسم السفلي من الصفحة: الطلب اليدوي.
            color: Colors.blue.shade700,  // لون خلفية العنصر.
            width: double.infinity,  // يأخذ العرض الكامل للشاشة.
            padding: const EdgeInsets.all(16.0),  // مسافة داخلية لجميع الجهات.
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,  // محاذاة عمودية في الوسط.
              crossAxisAlignment: CrossAxisAlignment.center,  // محاذاة أفقية في الوسط.
              children: <Widget>[
                const Text(
                  'خدمتك غير موجودة في النظام؟\n  يمكنك طلب خدمتك .',  // نص توجيهي للمستخدم.
                  textAlign: TextAlign.center,  // محاذاة في الوسط.
                  style: TextStyle(
                    fontSize: 18.0,
                    color: Colors.black87,
                    fontFamily: 'ElMessiri',  // استخدام خط عربي جميل.
                  ),
                ),
                const SizedBox(height: 20.0),  // مسافة عمودية بين النص والزر.
                ElevatedButton.icon(
                  onPressed: () {
                    Navigator.of(context).pushNamed('addservice');  // الانتقال إلى صفحة "إضافة خدمة".
                    print('تم النقر على زر نشر طلب عمل جديد');  // طباعة في وحدة التصحيح.
                  },
                  icon: const Icon(Icons.add),  // أيقونة الزر.
                  label: const Text(
                    ' طلب عمل جديد',
                    style: TextStyle(fontSize: 16.0, fontFamily: 'ElMessiri'),  // نص الزر.
                  ),
                  style: ElevatedButton.styleFrom(
                    foregroundColor: Colors.blue,  // لون النص والأيقونة.
                    padding: const EdgeInsets.symmetric(
                      horizontal: 30.0,
                      vertical: 15.0,
                    ),  // حجم الزر.
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(10.0),  // جعل الزر بزوايا دائرية.
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}
