// services/service_service.dart

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:homemate/models/service.dart';

class ServiceService {
  final CollectionReference _serviceCollection = FirebaseFirestore.instance
      .collection('services');

  Future<List<Service>> getServices() async {
    final querySnapshot = await _serviceCollection.get();
    return querySnapshot.docs.map((doc) => Service.fromFirestore(doc)).toList();
  }

  Future<Service> getServiceById(String id) async {
    final doc = await _serviceCollection.doc(id).get();
    if (!doc.exists) {
      throw Exception("Service with ID $id not found");
    }
    return Service.fromFirestore(doc);
  }

  Future<List<Service>> getServicesByCategoryId(String categoryId) async {
    final query =
        await FirebaseFirestore.instance
            .collection('services')
            .where('categoryId', isEqualTo: categoryId)
            .get();
    return query.docs.map((doc) => Service.fromFirestore(doc)).toList();
  }

  Future<List<Service>> getPendingServices(String categoryId) async {
    final query =
        await FirebaseFirestore.instance
            .collection('services')
            .where('status', isEqualTo: 'pending')
            .get();
    return query.docs.map((doc) => Service.fromFirestore(doc)).toList();
  }

  Future<List<Service>> getInActiveServices() async {
    final query =
        await FirebaseFirestore.instance
            .collection('services')
            .where('status', isEqualTo: 'inactive')
            .get();
    return query.docs.map((doc) => Service.fromFirestore(doc)).toList();
  }

  Future<void> updateStatusToRejected(String serviceId) async {
    await FirebaseFirestore.instance
        .collection('services')
        .doc(serviceId)
        .update({'status': 'rejected'});
  }
}
