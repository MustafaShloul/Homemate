import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart'; // للوصول إلى بيانات Firestore

class AdminScreen extends StatefulWidget {
  const AdminScreen({super.key});

  @override
  State<AdminScreen> createState() => _AdminScreenState();
}

class _AdminScreenState extends State<AdminScreen> {
  // دالة لتحديث حالة الخدمة (تم قبولها أو رفضها)
  Future<void> _updateServiceStatus(String serviceId, String status) async {
    try {
      await FirebaseFirestore.instance
          .collection('services') // الوصول إلى مجموعة الخدمات
          .doc(serviceId) // تحديد الخدمة حسب ID
          .update({'status': status}); // تحديث الحالة

      // إشعار بنجاح العملية
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Service $status successfully.')),
      );
    } catch (e) {
      print('Error updating service: $e'); // في حال حدوث خطأ

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error updating service status.')),
      );
    }
  }

  // دالة تسجيل الخروج
  void _logout() {
    Navigator.pushReplacementNamed(context, 'login');
  }

  // دالة توليد تقرير وهمي (نافذة منبثقة فقط)
  void _generateReport() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Report Generated'),
        content: const Text('Service report generated successfully.'),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.pushNamed(context, 'generate_report'); // الانتقال لصفحة التقرير
            },
            child: const Text('OK'),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Admin Dashboard')),

      // الاستماع للتغييرات على مجموعة الخدمات التي حالتها "pending"
      body: StreamBuilder<QuerySnapshot>(
        stream: FirebaseFirestore.instance
            .collection('services')
            .where('status', isEqualTo: 'pending') // فقط الطلبات المعلقة
            .snapshots(),
        builder: (context, snapshot) {
          if (!snapshot.hasData) {
            return const Center(child: CircularProgressIndicator()); // جاري التحميل
          }

          final services = snapshot.data!.docs;

          if (services.isEmpty) {
            return const Center(child: Text('No pending services.')); // لا توجد خدمات
          }

          // عرض الخدمات على شكل قائمة
          return ListView.builder(
            itemCount: services.length,
            itemBuilder: (context, index) {
              final doc = services[index]; // كل مستند خدمة
              final data = doc.data() as Map<String, dynamic>;

              return Card(
                margin: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                child: ListTile(
                  title: Text(data['providerName'] ?? 'مقدم الخدمة غير معروف'),
                  subtitle: Text(data['description'] ?? 'No Description'),

                  // أزرار القبول والرفض
                  trailing: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      IconButton(
                        icon: const Icon(Icons.check, color: Colors.green),
                        onPressed: () => _updateServiceStatus(doc.id, 'accepted'),
                      ),
                      IconButton(
                        icon: const Icon(Icons.close, color: Colors.red),
                        onPressed: () => _updateServiceStatus(doc.id, 'rejected'),
                      ),
                    ],
                  ),
                ),
              );
            },
          );
        },
      ),

      // أزرار عائمة للتقرير والخروج
      floatingActionButton: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          FloatingActionButton.extended(
            onPressed: _generateReport,
            label: const Text('Generate Report'),
            icon: const Icon(Icons.file_copy),
          ),
          const SizedBox(height: 10),
          FloatingActionButton.extended(
            onPressed: _logout,
            label: const Text('Logout'),
            icon: const Icon(Icons.logout),
            backgroundColor: Colors.red,
          ),
        ],
      ),
    );
  }
}
