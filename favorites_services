import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';

class FavoritesService {
  final _firestore = FirebaseFirestore.instance;
  final _auth = FirebaseAuth.instance;

  // دالة ترجع مرجع (Reference) إلى مجموعة "الخدمات المفضلة" للمستخدم الحالي في Firestore
  CollectionReference get _favoritesRef {
    final userId = _auth.currentUser?.uid;
    if (userId == null) {
      // في حالة عدم وجود مستخدم مسجل الدخول، نرمي استثناء
      throw Exception('User not authenticated');
    }
    return _firestore
        .collection('users')
        .doc(userId)
        .collection('favorite_services'); // مجموعة فرعية تخزن الخدمات المفضلة
  }

  /// إضافة خدمة إلى المفضلة
  Future<void> addToFavorites(String serviceId) async {
    try {
      await _favoritesRef.doc(serviceId).set({
        'addedAt': FieldValue.serverTimestamp(), // تاريخ الإضافة (وقت الخادم)
      });
    } catch (e) {
      print('Error adding to favorites: $e');
    }
  }

  /// إزالة خدمة من المفضلة
  Future<void> removeFromFavorites(String serviceId) async {
    try {
      await _favoritesRef.doc(serviceId).delete();
    } catch (e) {
      print('Error removing from favorites: $e');
    }
  }

  /// التحقق ما إذا كانت الخدمة موجودة في المفضلة
  Future<bool> isFavorite(String serviceId) async {
    try {
      final doc = await _favoritesRef.doc(serviceId).get();
      return doc.exists;
    } catch (e) {
      print('Error checking favorite status: $e');
      return false;
    }
  }

  /// جلب جميع معرفات الخدمات المفضلة مرة واحدة (غير متزامن مع التغييرات الحينية)
  Future<List<String>> getFavoriteServiceIdsOnce() async {
    try {
      final snapshot = await _favoritesRef.get();
      return snapshot.docs.map((doc) => doc.id).toList();
    } catch (e) {
      print('Error getting favorite services: $e');
      return [];
    }
  }

  /// الاستماع إلى تغييرات الخدمات المفضلة بشكل متزامن (Stream)
  Stream<List<String>> getFavoriteServiceIdsStream() {
    return _favoritesRef.snapshots().map(
      (snapshot) => snapshot.docs.map((doc) => doc.id).toList(),
    );
  }

  /// طريقة أخرى لإرجاع نفس الـ Stream (يمكن حذف واحدة منها إذا أردت)
  Stream<List<String>> getFavoriteServiceIds() {
    return _favoritesRef.snapshots().map(
      (snapshot) => snapshot.docs.map((doc) => doc.id).toList(),
    );
  }
}
