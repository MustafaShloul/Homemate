import 'package:flutter/material.dart';
import 'package:homemate/screens/services_item.dart';
import '../models/service.dart';
import '../services/favorites_services.dart'; // ðŸ‘ˆ import your favorite service

class CategoryServicesScreen extends StatefulWidget {
  static const screenRoute = '/category-servicse';
  final List<Service> availableServices;

  const CategoryServicesScreen(this.availableServices, {super.key});

  @override
  State<CategoryServicesScreen> createState() => CategoryServicesScreenState();
}

class CategoryServicesScreenState extends State<CategoryServicesScreen> {
  late String categoryTitle;
  late List<Service> displayServices;
  List<String> favoriteServiceIds = [];

  final FavoritesService _favoritesService = FavoritesService();

  @override
  void initState() {
    super.initState();
    _loadFavorites();
  }

  Future<void> _loadFavorites() async {
    final ids = await _favoritesService.getFavoriteServiceIdsOnce();
    setState(() {
      favoriteServiceIds = ids;
    });
  }

  void _toggleFavorite(String serviceId) async {
    if (favoriteServiceIds.contains(serviceId)) {
      await _favoritesService.removeFromFavorites(serviceId);
    } else {
      await _favoritesService.addToFavorites(serviceId);
    }
    _loadFavorites();
  }

  @override
  void didChangeDependencies() {
    final routeArgument =
        ModalRoute.of(context)?.settings.arguments as Map<String, String>;
    final categoryId = routeArgument['id'];
    categoryTitle = routeArgument['title']!;
    displayServices =
        widget.availableServices
            .where((service) => service.categoryId == categoryId)
            .toList();
    super.didChangeDependencies();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(
          categoryTitle,
          style: TextStyle(fontFamily: 'Amiri', fontSize: 25),
        ),
        backgroundColor: Colors.blue,
      ),
      body: ListView.builder(
        itemCount: displayServices.length,
        itemBuilder: (context, index) {
          final service = displayServices[index];
          return ServicesItem(
            id: service.id,
            title: service.title,
            phone: service.phone,
            location: service.location,
            providerName: service.providerName,
            isFavorite: favoriteServiceIds.contains(service.id),
            onToggleFavorite: () => _toggleFavorite(service.id),
          );
        },
      ),
    );
  }
}
