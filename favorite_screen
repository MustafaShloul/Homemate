import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:homemate/screens/services_item.dart';
import 'package:homemate/services/favorites_services.dart';

class FavoriteServicesScreen extends StatefulWidget {
  const FavoriteServicesScreen({super.key});

  @override
  State<FavoriteServicesScreen> createState() => _FavoriteServicesScreenState();
}

class _FavoriteServicesScreenState extends State<FavoriteServicesScreen> {
  // كائن لإدارة المفضلات (إضافة، حذف، جلب)
  final FavoritesService _favoritesService = FavoritesService();

  // قائمة تخزن معرفات الخدمات المفضلة
  List<String> favoriteServiceIds = [];

  @override
  void initState() {
    super.initState();
    _loadFavorites(); // تحميل المفضلات عند بدء الشاشة
  }

  // دالة لتحميل معرفات الخدمات المفضلة من الخدمة
  Future<void> _loadFavorites() async {
    final ids = await _favoritesService.getFavoriteServiceIdsOnce();
    setState(() {
      favoriteServiceIds = ids; // تحديث الحالة مع المعرفات
    });
  }

  // دالة لتبديل حالة المفضلة (إضافة أو إزالة)
  void _toggleFavorite(String serviceId) async {
    if (favoriteServiceIds.contains(serviceId)) {
      await _favoritesService.removeFromFavorites(serviceId);
    } else {
      await _favoritesService.addToFavorites(serviceId);
    }
    _loadFavorites(); // تحديث القائمة بعد التغيير
  }

  @override
  Widget build(BuildContext context) {
    return StreamBuilder<List<String>>(
      // الاستماع لتغييرات المفضلات بشكل لحظي
      stream: _favoritesService.getFavoriteServiceIds(),
      builder: (context, snapshot) {
        final favoriteIds = snapshot.data ?? [];

        // إذا لم تكن هناك خدمات مفضلة
        if (favoriteIds.isEmpty) {
          return const Center(child: Text("No favorite services yet."));
        }

        // جلب جميع الخدمات من قاعدة البيانات
        return FutureBuilder<QuerySnapshot>(
          future: FirebaseFirestore.instance.collection('services').get(),
          builder: (context, snapshot) {
            if (!snapshot.hasData) return const Center(child: CircularProgressIndicator());

            final allServices = snapshot.data!.docs;

            // تصفية الخدمات لتشمل فقط المفضلة
            final favoriteServices = allServices.where((s) => favoriteIds.contains(s.id)).toList();

            // عرض قائمة الخدمات المفضلة باستخدام ListView
            return ListView.builder(
              itemCount: favoriteServices.length,
              itemBuilder: (ctx, index) {
                final service = favoriteServices[index];
                final serviceId = service.id;

                return ServicesItem(
                  id: serviceId,
                  title: service['title'],
                  phone: service['phone'],
                  location: service['location'],
                  providerName: service['providerName'],
                  isFavorite: favoriteServiceIds.contains(service.id),
                  onToggleFavorite: () => _toggleFavorite(service.id),
                );
              },
            );
          },
        );
      },
    );
  }
}
